.. _BBox:

==========
**BBox**
==========

BBox is a bounding box similar to :ref:`Rect`, except that all corner coordinates are rounded to integer coordinates.  

.. seealso:: :ref:`Rect`

Methods
=======

==================================== ======================================================
:meth:`~BBox.intersect_bbox`         Compute the intersection with another bounding box.
:meth:`~BBox.union_bbox`             Compute the union with another bounding box.
:meth:`~BBox.get_width`              Get width of the bounding box.
:meth:`~BBox.get_height`             Get height of the bounding box.
:meth:`~BBox.is_empty`               Check if the bounding box is empty.
:meth:`~BBox.is_infinite`            Check if the bounding box is infinite.
==================================== ======================================================

Attributes
==========

================ ========================================
:attr:`~BBox.x0` X-coordinate of the top left corner.
:attr:`~BBox.y0` Y-coordinate of the top left corner.
:attr:`~BBox.x1` X-coordinate of the bottom right corner.
:attr:`~BBox.y1` Y-coordinate of the bottom right corner.
================ ========================================

Class API
==========

.. class:: BBox

   .. method:: intersect_bbox(self, bbox)

      Compute the intersection with another bounding box. Similar to :meth:`Rect.intersect_rect` but operates on two bounding boxes instead of two rectangles.

      :param `bbox`: The bounding box to intersect.
      :type `bbox`: :ref:`BBox`

      :rtype: :ref:`BBox`

   .. method:: union_bbox(self, bbox)

      Compute the union with another bounding box. Similar to :meth:`Rect.union_rect` but operates on two bounding boxes instead of two rectangles.

      :param `bbox`: The bounding box to union.
      :type `bbox`: :ref:`BBox`

      :rtype: :ref:`BBox`

   .. method:: get_width(self)

      Get width of the bounding box.

      :rtype: int

   .. method:: get_height(self)

      Get height of the bounding box.

      :rtype: int

   .. method:: is_empty(self)

      Check if the bounding box is empty. Same definition of empty bounding boxes as for empty rectangles. 
      
      .. seealso:: :meth:`Rect.is_empty`.

      :rtype: int
      :returns: ``1`` if the bbox is empty, ``0`` otherwise.

   .. method:: is_infinite(self)

      Check if the bounding box is infinite. Same definition of infinite bounding boxes as for infinite rectangles. 
      
      .. seealso:: :meth:`Rect.is_infinite`.

      :rtype: int
      :returns: ``1`` if the bbox is infinite, ``0`` otherwise.

   .. attribute:: x0

      X-coordinate of the top left corner. 

      :type: int


   .. attribute:: y0

      Y-coordinate of the top left corner. 

      :type: int

   .. attribute:: x1

      X-coordinate of the bottom right corner. 

      :type: int


   .. attribute:: y1

      Y-coordinate of the bottom right corner. 

      :type: int

