.. _IRect:

==========
**IRect**
==========

IRect is a bounding box similar to :ref:`Rect`, except that all corner coordinates are rounded to integer coordinates.  

.. seealso:: :ref:`Rect`

Methods
=======

==================================== ======================================================
:meth:`~IRect.__init__`              Constructor. 
:meth:`~IRect.intersect_irect`       Compute the intersection with another bounding box.
:meth:`~IRect.union_irect`           Compute the union with another bounding box.
:meth:`~IRect.get_width`             Get width of the bounding box.
:meth:`~IRect.get_height`            Get height of the bounding box.
:meth:`~IRect.is_empty`              Check if the bounding box is empty.
:meth:`~IRect.is_infinite`           Check if the bounding box is infinite.
==================================== ======================================================

Attributes
==========

================= ========================================
:attr:`~IRect.x0` X-coordinate of the top left corner.
:attr:`~IRect.y0` Y-coordinate of the top left corner.
:attr:`~IRect.x1` X-coordinate of the bottom right corner.
:attr:`~IRect.y1` Y-coordinate of the bottom right corner.
================= ========================================

Class API
==========

.. class:: IRect

   .. method:: __init__(self, x0, y0, x1, y1)

      Constructor. (x0, y0) is the top left vertex and (x1, y1) is the bottom right one.

   .. method:: intersect_irect(self, irect)

      Compute the intersection with another bounding box. Similar to :meth:`Rect.intersect_rect`.

      :param `irect`: The bounding box to intersect.
      :type `irect`: :ref:`IRect`

      :rtype: :ref:`IRect`

   .. method:: union_irect(self, irect)

      Compute the union with another bounding box. Similar to :meth:`Rect.union_rect`.

      :param `irect`: The bounding box to union.
      :type `irect`: :ref:`IRect`

      :rtype: :ref:`IRect`

   .. method:: get_width(self)

      Get width of the bounding box.

      :rtype: int

   .. method:: get_height(self)

      Get height of the bounding box.

      :rtype: int

   .. method:: is_empty(self)

      Check if the bounding box is empty: x0=x1 or y0=y1.
      
      .. seealso:: :meth:`Rect.is_empty`.

      :rtype: int
      :returns: ``1`` if the irect is empty, ``0`` if not.

   .. method:: is_infinite(self)

      Check if the bounding box is infinite: x0>x1 or y0>y1.
      
      .. seealso:: :meth:`Rect.is_infinite`.

      :rtype: int
      :returns: ``1`` if the irect is infinite, ``0`` if not.

   .. attribute:: x0

      X-coordinate of the top left corner. 

      :type: int


   .. attribute:: y0

      Y-coordinate of the top left corner. 

      :type: int

   .. attribute:: x1

      X-coordinate of the bottom right corner. 

      :type: int


   .. attribute:: y1

      Y-coordinate of the bottom right corner. 

      :type: int

