.. _Context:

================
**Context**
================

Context is an object that contains the global state. Most functions in MuPDF take a context argument to be able to reference the global state. 

Methods
=======

============================================== ==============================================================================================
:meth:`~Context.__init__`                      Constructor.
:meth:`~Context.get_aa_level`                  Get the number of bits of antialiasing we are using. Between 0 and 8.
:meth:`~Context.new_display_list`              Create an empty display list.
:meth:`~Context.new_pixmap`                    Create a new pixmap, with it's origin at (0,0)
:meth:`~Context.new_pixmap_with_bbox`          Create a pixmap of a given size, location and pixel format.
:meth:`~Context.new_pixmap_with_bbox_and_data` Create a pixmap of a given size, location and pixel format, using the supplied data block.
:meth:`~Context.new_pixmap_with_data`          Create a new pixmap, with it's origin at (0,0) using the supplied data block.
:meth:`~Context.new_text_page`                 Create an empty text page.
:meth:`~Context.new_text_sheet`                Create an empty style sheet.
:meth:`~Context.open_document`                 Open a PDF, XPS or CBZ document.
:meth:`~Context.set_aa_level`                  Set the number of bits of antialiasing we should use.
============================================== ==============================================================================================

Class API
==========

.. class:: Context

   .. method:: __init__(self, max_store)

      Constructor. 
      
      Allocate context containing global state. The global state contains an exception stack, resource store, etc. Most functions in MuPDF take a context argument to be able to reference the global state. 

      :param `max_store`: maximum size in bytes of the resource store, before it will start evicting cached resources such as fonts and images. :data:`FZ_STORE_UNLIMITED` can be used if a hard limit is not desired. Use :data:`FZ_STORE_DEFAULT` to get a reasonable size.

   .. method:: get_aa_level(self)
   
      Get the number of bits of antialiasing we are using. Between 0 and 8.

      :rtype: int

   .. method:: new_display_list(self)

      Create an empty display list.

      A display list contains drawing commands (text, images, etc.). Use :meth:`DisplayList.new_list_device` for populating the list.

      :rtype: :ref:`DisplayList`

   .. method:: new_pixmap(self, cs, w, h)

      Create a new pixmap, with it's origin at (0,0)

      :param `cs`: The colorspace to use for the pixmap. See :data:`fz_device_rgb`, :data:`fz_device_gray`.
      :type `cs`: ColorSpace

      :param `w`: The width of the pixmap (in pixels)
      :type `w`: int

      :param `h`: The height of the pixmap (in pixels)
      :type `h`: int

      :rtype: :ref:`Pixmap`

   .. method:: new_pixmap_with_bbox(self, cs, bbox)

      Create a pixmap of a given size, location and pixel format.

      The bounding box specifies the size of the created pixmap and where it will be located. The colorspace determines the number of components per pixel. Alpha is always present. 

      :param `cs`: The colorspace to use for the pixmap. See :data:`fz_device_rgb`, :data:`fz_device_gray`.
      :type `cs`: ColorSpace

      :param `bbox`: Bounding box specifying location/size of created pixmap.
      :type `bbox`: BBox

      :rtype: :ref:`Pixmap`

   .. method:: new_pixmap_with_bbox_and_data(self, cs, bbox, data)

      Create a pixmap of a given size, location and pixel format, using the supplied data block.

	  The bounding box specifies the size of the created pixmap and where it will be located. The colorspace determines the number of components per pixel. Alpha is always present. 

      :param `cs`: The colorspace to use for the pixmap. See :data:`fz_device_rgb`, :data:`fz_device_gray`.
      :type `cs`: ColorSpace

      :param `bbox`: Bounding box specifying location/size of created pixmap.
      :type `bbox`: BBox

      :param `data`: The data block to keep the samples in.
      :type `data`: string

      :rtype: :ref:`Pixmap`

   .. method:: new_pixmap_with_data(self, cs, w, h, data)

      Create a new pixmap, with it's origin at (0,0) using the supplied data block.

      :param `cs`: The colorspace to use for the pixmap. See :data:`fz_device_rgb`, :data:`fz_device_gray`.
      :type `cs`: ColorSpace

      :param `w`: The width of the pixmap (in pixels).
      :type `w`: int

      :param `h`: The height of the pixmap (in pixels).
      :type `h`: int

      :param `data`: The data block to keep the samples in.
      :type `data`: string

      :rtype: :ref:`Pixmap`

   .. method:: new_text_page(self, rect)

      Create an empty text page.

      The text page is filled out by the text device to contain the blocks, lines and spans of text on the page.

      :param `rect`: The rectangle covering the page.
      :type `rect`: Rect

      :rtype: :ref:`TextPage`
   
   .. method:: new_text_sheet(self)

      Create an empty style sheet.

      The style sheet is filled out by the text device, creating one style for each unique font, color, size combination that is used.

      :rtype: :ref:`TextSheet`


   .. method:: open_document(self, filename)

      Open a PDF, XPS or CBZ document.

      Open a document file and read its basic structure so pages and objects can be located. MuPDF will try to repair broken documents (without actually changing the file contents).

      :param `filename`: a path to a file as it would be given to open(2).
      :type `filename`: String

      :rtype: :ref:`Document`


   .. method:: set_aa_level(self, bits)

      Set the number of bits of antialiasing we should use.

      :param `bits`: The number of bits of antialiasing to use (values are clamped to within the 0 to 8 range).
      :type `bits`: int


