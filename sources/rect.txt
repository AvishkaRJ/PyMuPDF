.. _Rect:

==========
**Rect**
==========

Rect is a rectangle represented by two diagonally opposite corners at arbitrary coordinates.  

Rectangles are always axis-aligned with the X- and Y- axes. The relationship between the coordinates are that x0 <= x1 and y0 <= y1 in all cases except for infinte rectangles. The area of a rectangle is defined as (x1 - x0) * (y1 - y0). If either x0 > x1 or y0 > y1 is true for a given rectangle then it is defined to be infinite.

Compare to :ref:`BBox` which has corners at integer coordinates.

Methods
=======

==================================== =========================================================================
:meth:`~Rect.__init__`               Constructor. 
:meth:`~Rect.bbox_covering_rect`     Get the minimal bounding box that covers the rectangle.
:meth:`~Rect.round_rect`             Round a rect into a bounding box.
:meth:`~Rect.intersect_rect`         Compute the intersection with another rectangle.
:meth:`~Rect.union_rect`             Compute the union with another rectangle.
:meth:`~Rect.get_width`              Get width of the rectangle.
:meth:`~Rect.get_height`             Get height of the rectangle.
:meth:`~Rect.is_empty`               Check if the rectangle is empty.
:meth:`~Rect.is_infinite`            Check if the rectangle is infinite.
==================================== =========================================================================

Attributes
==========

================ ========================================
:attr:`~Rect.x0` X-coordinate of the top left corner.
:attr:`~Rect.y0` Y-coordinate of the top left corner.
:attr:`~Rect.x1` X-coordinate of the bottom right corner.
:attr:`~Rect.y1` Y-coordinate of the bottom right corner.
================ ========================================

Class API
==========

.. class:: Rect

   .. method:: __init__(self, x0=0, y0=0, x1=0, y1=0)

      Constructor. An empty rectangle will be built if no arguments given.

   .. method:: bbox_covering_rect(self)

      Get the minimal bounding box that covers the rectangle.

      Coordinates in a bounding box are integers, so rounding of the rects coordinates takes place. The top left corner is rounded upwards and left while the bottom right corner is rounded downwards and to the right. 

      :rtype: :ref:`BBox`

   .. method:: round_rect(self)

      Round a rect into a bounding box.

      This differs from :meth:`~Rect.bbox_covering_rect`, in that :meth:`~Rect.bbox_covering_rect` slavishly follows the numbers (i.e any slight over/under calculations can cause whole extra pixels to be added). :meth:`~Rect.round_rect` allows for a small amount of rounding error when calculating the bbox.

      :rtype: :ref:`BBox`

   .. method:: intersect_rect(self, rect)

      Compute the intersection with another rectangle. 
      
      Compute the largest axis-aligned rectangle that covers the area covered by both given rectangles. If either rectangle is empty then the intersection is also empty. If either rectangle is infinite then the intersection is simply the non-infinite rectangle. Should both rectangles be infinite, then the intersection is also infinite.

      :param `rect`: The rectangle to intersect.
      :type `rect`: :ref:`Rect`

      :rtype: :ref:`Rect`

   .. method:: union_rect(self, rect)

      Compute the union with another rectangle. 

      Compute the smallest axis-aligned rectangle that encompasses both given rectangles. If either rectangle is infinite then the union is also infinite. If either rectangle is empty then the union is simply the non-empty rectangle. Should both rectangles be empty, then the union is also empty.

      :param `rect`: The rectangle to union.
      :type `rect`: :ref:`Rect`

      :rtype: :ref:`Rect`

   .. method:: get_width(self)

      Get width of the rectangle.

      :rtype: float

   .. method:: get_height(self)

      Get height of the rectangle.

      :rtype: float

   .. method:: is_empty(self)

      Check if the rectangle is empty. An empty rectangle is defined as one whose area is zero.
      
      :rtype: int
      :returns: ``1`` if the rectangle is empty, ``0`` otherwise.

   .. method:: is_infinite(self)

      Check if the rectangle is infinite. An infinite rectangle is defined as one where either of the two relationships between corner coordinates are not true.
      
      :rtype: int
      :returns: ``1`` if the rectangle is infinite, ``0`` otherwise.

   .. attribute:: x0

      X-coordinate of the top left corner. 

      :type: float


   .. attribute:: y0

      Y-coordinate of the top left corner. 

      :type: float

   .. attribute:: x1

      X-coordinate of the bottom right corner. 

      :type: float


   .. attribute:: y1

      Y-coordinate of the bottom right corner. 

      :type: float

